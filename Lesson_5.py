'''
Реализуйте класс MoneyBox для работы с виртуальной копилкой.
Каждая копилка имеет ограниченную вместимость, которая выражается целым числом – количеством монет, которые можно 
положить в копилку. Класс должен поддерживать информацию о количестве монет в копилке, предоставлять возможность добавлять 
монеты в копилку и узнавать, можно ли добавить в копилку ещё какое-то количество монет, не превышая ее вместимость.
При создании копилки, число монет в ней равно 0.
Гарантируется, что метод add(self, v) будет вызываться только если can_add(self, v) – True.
'''

class MoneyBox:       #класс для работы с кошельком
    def __init__(self, capacity):   #функция с дефолтовыми атрибутами
        self.capacity = capacity    #атрибут для указания вместимости конкретного кошелька
        self.count = 0       #начальное количество монет в каждом кошельке

    def can_add(self, v):   #функция проверки достаточного места для новых монет в кошельке
        if self.count + v <= self.capacity:   #если сумма монет в кошельке и новых монет не превышает вместимости кошелька, то
            return True   #вернём True
        else:   #иначе False
            return False

    def add(self, v):   #функция добавления новых монет в кошелек
        if MoneyBox.can_add(self, v) == True:   #если места для новых монет достаточно, то
            self.count += v   #добавляем их в кошелёк
            
#проверки
'''
a = MoneBox(10)
b = MoneyBox(11)
print(b.capacity)
print(a.capacity)
print(b.count)
print(b.can_add(5))
b.add(5)
print(b.count)
print(b.can_add(6))
b.add(6)
print(b.count)
print(b.can_add(0))
b.add(0)
print(a.count)
print(a.can_add(5))
a.add(5)
print(a.count)
'''
