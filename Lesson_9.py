'''
Одно из применений множественного наследования – расширение функциональности класса каким-то заранее определенным способом. 
Например, если нам понадобится логировать какую-то информацию при обращении к методам класса.
Реализуйте класс LoggableList, отнаследовав его от классов list и Loggable таким образом, чтобы при добавлении элемента в 
список посредством метода append в лог отправлялось сообщение, состоящее из только что добавленного элемента.
'''

import time    #подгружаем модуль

class Loggable: #класс для логирования текущего времени и переданного аргумента
    def log(self, msg):
        print(str(time.ctime()) + ": " + str(msg))

class LoggableList(list, Loggable): #класс с функцией, дополняющей базовую логику метода append
    def append(self, msg):
        super(LoggableList, self).append(msg) #ищем и выполняем функцию append у предков класса LoggableList
        self.log(msg) #вызываем функцию логирования
