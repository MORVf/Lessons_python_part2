'''
Вам дается последовательность целых чисел и вам нужно ее обработать и вывести на экран сумму первой пятерки чисел из этой 
последовательности, затем сумму второй пятерки, и т. д.
Но последовательность не дается вам сразу целиком. С течением времени к вам поступают её последовательные части. Например, 
сначала первые три элемента, потом следующие шесть, потом следующие два и т. д.
Реализуйте класс Buffer, который будет накапливать в себе элементы последовательности и выводить сумму пятерок последовательных 
элементов по мере их накопления.
Одним из требований к классу является то, что он не должен хранить в себе больше элементов, чем ему действительно необходимо, 
т. е. он не должен хранить элементы, которые уже вошли в пятерку, для которой была выведена сумма.
Обратите внимание, что во время выполнения метода add необходимо выводить сумму пятерок и это может потребоваться несколько раз до тех пор, 
пока в буфере не останется менее пяти элементов.
'''

class Buffer:
    def __init__(self):  #функция инициализации дефолтового пустого объекта в памяти
        self.posl = []   #инициализируем в нём пустой список для каждого экземпляра класса

    def add(self, *a):   # функция обработки входящей первичной последовательности
        self.posl += a   #конкатенируем её со списком 
        def posl_sum_func(posl): #внутренняя функция для постобработки списка
            finish_posl = []   #промежуточный список
            posl_sum = 0   #счетчик суммы значений
            if len(self.posl) >= 5:  #если в списке больше или равно 5 цифр
                for i in range(len(self.posl)):  #пробегаем по всему списку
                    if i < 5:   #если это первые 5 цифр, то
                        posl_sum += self.posl[i]  #суммируем их
                    else:   #все остальные
                        finish_posl += [self.posl[i]]  #записываем в вспомогательный список
                self.posl = finish_posl  #данный вспомогательный список приравниваем первичному
                if len(self.posl) >= 5:  #если в списке всё ещё равно или более 5 цифр
                    print(posl_sum)   #выводим сумму цифр, посчитанных ранее
                    posl_sum_func(self.posl)  #и вызываем рекурсивно ту же самую функцию для нового подсчета суммы следующих 5 цифр
                else:   #иначе
                    print(posl_sum)   #просто выводим сумму и завершаем выполнение функции
        posl_sum_func(self.posl)   #первичный вызов внутренней функции

    def get_current_part(self):  #функция вывода актуального списка цифр "на сейчас"
        return self.posl

#тесты
'''
buf = Buffer()
buf.add(1, 2, 3)
buf.get_current_part()
buf.add(4, 5, 6)
buf.get_current_part()
buf.add(7, 8, 9, 10)
buf.get_current_part()
buf.add(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
buf.get_current_part()
'''
