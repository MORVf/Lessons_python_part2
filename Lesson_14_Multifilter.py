"""Текст задания.

Одним из самых часто используемых классов в Python является класс filter. Он принимает в конструкторе два аргумента a и
f – последовательность и функцию, и позволяет проитерироваться только по таким элементам x из последовательности a, что
f(x) равно True. Будем говорить, что в этом случае функция f допускает элемент x, а элемент x является допущенным.
В данной задаче мы просим вас реализовать класс multifilter, который будет выполнять ту же функцию, что и стандартный 
класс filter, но будет использовать не одну функцию, а несколько.
Решение о допуске элемента будет приниматься на основании того, сколько функций допускают этот элемент, и сколько не 
допускают. Обозначим эти количества за pos и neg.
Введем понятие решающей функции – это функция, которая принимает два аргумента – количества pos и neg, и возвращает True, 
если элемент допущен, и False иначе.

"""

__all__ = ['mul2', 'mul3', 'mul5', 'MultiFilter']
__version__ = '1.0.0'
__author__ = 'Evgenii Mayorov'


def mul2(x):
    """Функция тестовая, возвращающая True, если цифра делится на 2 без остатка."""
    if x % 2 == 0:
        return True
    else:
        return False


def mul3(x):
    """Функция тестовая, возвращающая True, если цифра делится на 3 без остатка."""
    if x % 3 == 0:
        return True
    else:
        return False


def mul5(x):
    """Функция тестовая, возвращающая True, если цифра делится на 5 без остатка."""
    if x % 5 == 0:
        return True
    else:
        return False


class MultiFilter:
    
    """Класс фильтрации элементов последовательности, удовлетворяющих условиям указанных функций.
    
    Содержит функции judge_half, judge_any, judge_all, __init__, __iter__.
    
    """
    
    def judge_half(pos, neg):
        """Функция допускает элемент, если его допускает хотя бы половина фукнций.
        
        Аргументы:
        pos - счетчик количества функций, которые допускают элемент
        neg - счетчик количества функций, которые не допускают элемент
        
        """
        if pos >= neg:
            return True
        else:
            return False

    def judge_any(pos, neg):
        """Функция допускает элемент, если его допускает хотя бы одна функция.
        
        Аргументы:
        pos - счетчик количества функций, которые допускают элемент
        neg - счетчик количества функций, которые не допускают элемент
        
        """
        if pos >= 1:
            return True
        else:
            return False

    def judge_all(pos, neg):
        """Функция допускает элемент, если его допускают все функции.
        
        Аргументы:
        pos - счетчик количества функций, которые допускают элемент
        neg - счетчик количества функций, которые не допускают элемент
        
        """
        if neg == 0:
            return True
        else:
            return False

    def __init__(self, iterable, *funcs, judge=judge_any):
        """Функция инициализации.
        
        Аргументы:
        iterable - исходная последовательность
        funcs - набор допускающих функций
        judge - решающая функция (по умолчанию judge_any)
        
        """
        self.iterable = iterable
        self.funcs = funcs
        self.judge = judge

    def __iter__(self):
        """Функция иттератор.
        
        Возвращает элементы выходной последовательности на основе указанной решающей
        функции.
        
        """
        for itr in self.iterable:
            pos = 0  # счетчик количества функций, которые допускают элемент
            neg = 0  # счетчик количества функций, которые не допускают элемент
            for func in self.funcs:
                if func(itr) is True:  # если функция допускает элемент
                    pos += 1
                else:
                    neg += 1

            if self.judge(pos, neg) is True:  # вызываем решающую функцию
                yield itr  # генерируем элемент выходной последовательности


if __name__ == "__main__":

    a = [i for i in range(31)]

    print(list(MultiFilter(a, mul2, mul3, mul5)))
    print(list(MultiFilter(a, mul2, mul3, mul5, judge=MultiFilter.judge_any)))
    print(list(MultiFilter(a, mul2, mul3, mul5, judge=MultiFilter.judge_half)))
    print(list(MultiFilter(a, mul2, mul3, mul5, judge=MultiFilter.judge_all)))
